OO基础
抽象
封装
多态
继承

OO设计原则
1、封装变化
2、针对接口编程，而不是针对实现编程
3、多用组合，少用继承
4、为了交互对象之间的松耦合设计而努力
5、对扩展开放，对修改关闭
6、依赖抽象，不要依赖具体类
7、最少知识原则：只和朋友交谈
8、别找我，我会找你
9、类应该只有一个改变的理由
10、


设计模式列表：
策略模式：定义算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户
观察者模式：在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新
装饰者模式：动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择
工厂方法模式：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类
抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类
单例模式：确保一个类只有一个实例，并提供全局访问点
命令模式：将请求封装成对象，以便使用不同的请求、队列或者日志来参数化其它对象。命令模式也可以支持撤销操作
适配器模式：将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间
外观模式：提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用
模板方法模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，
    重新定义算法中的某些步骤
迭代器模式：提供一种方法顺序访问一个聚合（集合）对象中的各个元素，而又不暴露其内部的表示
组合模式：允许你将对象组合成树形结构来表现"整体/部分"层次结构。组合能让客户以一致的方式处理个别对象以及对象组合
状态模式：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类
代理模式：为另一个对象提供一个替身或者占位符，以控制对这个对象的访问


创建型模式
定义：创建型模式涉及到将对象实例化，这类模式都提供一个方法，将客户从所需要实例化的对象中解耦
模式列表
	抽象工厂
	工厂方法
	单例

行为型模式
定义：只要是行为型模式，都涉及到类和对象如何交互及分配职责，行为型模式的目的是对象之间的沟通和互连
模式列表
	状态
	命令
	迭代器
	观察者
	策略
	模板方法


结构型模式
定义：结构型模式可以让你把类或对象组合到更大的结构中，结构型模式用来描述类和对象如何被组合
      以建立新的结构或新的功能。
模式列表
	组合
	装饰器
	适配器
	外观
	代理





